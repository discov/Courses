Funciones agregado sql

SUM
MIN
MAX
AVG

*solo numericos
*select func(col) from tabla

Funciones fecha sql

DATEPART(part[DD,MM,YY],col)
1000 0000
---------------------------------------

*React*

js Object.assign(destino, fuentes)	copia valores de todas las propiedades enumerables de uno o mas objetos
								a un objeto destino, regresa el objeto destino
js array.splice(start,amountDel,items) borra y/o inserta items apartir de un indice
	*muta el arreglo
js array.slice(inicio, fin)	Toma elementos en rango sin incluir fin, regresa nuevo arreglo
	*Copia arreglo

Mutative functions:		push, pop, shift, unshift, sort, reverse, splice, delete!?.

--1.Clases vs 2.Functional components--
1. Defines Components with them having or not props and state
2. Function that takes props as input and returns jsx to be rendered

Create components:

with create class:
	=>var MyComponent = React.createClass({ render: { return //some jsx} });

ES6 syntactic sugar style:
class-based components (also referred to as "containers", "smart" or "stateful" components) 
	=> class Cmp extends Component { render () { return <div>some JSX</div> } }

Functional components (also referred to as "presentational", "dumb" or "stateless" components - more about this later in the course) 
	=> const cmp = () => { return <div>some JSX</div> } (using ES6 arrow functions as shown here is recommended but optional)
	
Rendering components

ReactDOM.render(<MyComponent/>, document.getElementById('someContainer') );

Conventions:
classes 	upper
functions 	lower
exports		upper
variables	lower
files		upper
html		lower
custComp	upper

eventhandler = "myEvent"+Handler


Some Functions:
React.isValidElement(object)

 **JSX:
*CurlyBraces to inject js inside jsx
*Class is js reserved word so we use className for jsx
*Only changes in props  and/ or state  trigger React to re-render 
	components and potentially update the DOM in the browser
**Create-react-app:
*You can import css in js file thanks to webpack
 **Props:
*Props allow passing data from parent to child component
*Accesd props: function based comp {props.prop} / class based {this.props.prop}
*props.children reserved prop outputs items betwen component tags
*props trigger ui update cause they pass data down component three
 **State:
*state is property of component class meaning only class based components have it
*state change triggers ui update as well
*state only available from its component
*state access {this.state.prop}

 **Events:
*jsx events dont need() on function, must only pass reference
*if () on jsx events they will be called on object render and get buggy
*only use () if event passed with arrow function

Events:
	Clipboard:	onCopy onCut onPaste | properties: DOMDataTransfer clipboardData
	Composition:	onComposition(End/Start/Update) | properties: string data
	KeyBoard:	onKey(Down/Press/Up) | properties: boolean {altKey, ctrlKey, getModifierState(key), metaKey, repeat, shiftKey }
																						number { charCode, keyCode, location, wich }
																						string { key, locale }
	Focus:	onFocus onBlur | properties: DOMEventTarget relatedTarget
	Form:		onChange onInput onInvalid onSubmit
	Mouse:	onClick onContextMenu onDoubleClick onDrag onDragEnd onDragEnter onDragExit onDragLeave onDragOver 
					onDragStart onDrop onMouseDown onMouseEnter onMouseLeave onMouseMove onMouseOut onMouseOver
					onMouseUp  *Enter and Leave propagate from element being left ot the other
											*No ordinary bubbling and no capture phase
											| properties: boolean { altKey, ctrlKey, getModifierState(key), metaKey, shiftKey }
																  number { button, buttons, clientX, clientY, pageX, pageY, screenX, screenY }
																  DOMEventTarget relatedTarget
	Selection:	onSelect
	TouchEvents:	onTouch(Cancel/End/Start/Move) | properties: boolean { altKey, ctrlKey, getModifierState(key), metaKey, shiftKey }
																													DOMTouchList { changedTouches, targetTouches, touches }

	UI:	onScroll | properteies: number detail / DOMAbstractView view
	Wheel:	onWheel	|	number	deltaMode, deltaX, deltaY, deltaZ
	Media:	onAbort onCanPlay onCanPlayThrough onDurationChange onEmptied onEncrypted onEnded onError onLoadedData 
					onLoadedMetadata onLoadStart onPause onPlay onPlaying onProgress onRateChange onSeeked onSeeking onStalled 
					onSuspend onTimeUpdate onVolumeChange onWaiting
	ImageEvents:	onLoad onError
	AnimationEvents:	onAnimationStart onAnimationEnd onAnimationIteration | properties string { animationName, pseudoElement }
																																								float { elapsedTime }
	Transition:	onTransitionEnd	|	properites:	string { propertyName, pseudoElement }, float { elapsedTime }
	Other:	onToggle
	
Passing Arguments to eventHandler:
	-you can use click={myEventHandler.bind(this,'myarg') }
	-use arrowfunc	allowing correct use of pharentesis click={ ( )=>this.myEventHandler('myarg') }
			it acts like an anonymous func wich will be executed on click, ( ) can take event as argument
	** Bind usage is prefered, arrow function tends to re-render object to often (inefficient)
	*event object is passed automatically to function 
	
----------------------------------------

.NET

Ciclo de paginas
Res. Inicializacion, instanciacion, restauracion y mantenimiento(viewstate),
corre manejadores de eventos, rendereo


			

Stages:
				Request:
					Se valida si es necesario compilar pagina(incia ciclo) o enviar version cacheada
				Start:
					Se establece se setean request, response, ispostback, uiculture
				Initialization:
					Se hacen disponibles los controles en la pagina, se establece su UniqueID,
					se establecen master page y temas segun aplique
					*En este punto aun no se restauran valores de viewstate a los controles
				Load:
					Si se trata de un postback se cargan propiedades de controles se recuperan
					del viewstate y controlstate
				PostbackEventHandling:
					Si se trata de un postback se llaman los eventhandlers, despues el metodo
					Validate de todos los controles validadores es llamado, excepto en el caso
					de eventos que provocan validacion, estos son validados antes de
					ejecutar eventhandler
				Rendering:
					Se salva viewstate antes de renderear, se llama el metodo render de cada control
					proveyendo un textwriter que escribe su output al objeto outputstream de la
					propiedad Response de la pagina
				Unload:
					Es disparado tras finalizar de renderear y enviar la pagina al cliente, y esta está lista para ser
					descartada

					
					
Eventos:
				Preinit:
							Revisa isPostBack
							Crea/Recrea objetos dinámicos
							Se establece pagina maestra dinamicamente
							Se establecen temas de manera dinámica
						*Aun no se carga viewstate
				Init:
							Corre cuando cada control a sido inicializado
							Se establecen UniqueID's y se aplican skin settings
							Se utiliza para para leer o inicializar propiedades de controles
							Se dispara el evento initi desde el control mas abajo en el arbol
								hasta llegar a la pagina misma
				InitComplete:
							Valores del Viewstate no han sido cargados aun
							
							
							
------------------------------------------------

ES6

Arrow Function:	
	(params) => returnValue
	si solo un parametro omitir parentesis
	si ningun parametro parentesis vacio
import/export:
	export keyword before something to make it available for import
	export default to make it the default one
	import someName from './file.js' imports default import from file.js into someName
	import {name} from './file.js' imports object name from file.js (named export)
	import names can also be comma separated ej. import {name1,name2,name3} from 'file.js'
	import * as someName from './.......' to get all named imports under the someName object
	*relative paths ./ seeks on item container
	*imprt can ommit extension if is js file
	
spread/rest ...	:
	function(...args) expande elementos, funciona en arreglos y objetos.
	sustituto de Object.assign({destino});
spread:	
	
	Used to split up array elements or  object properties
	const newArray = [..args,var1,var2]
	const newObject = { ...args, prop1:"prop1" }
Rest:
	Used to merge a list of function arguments into an array
	function someFunc(...args){return args.otherFunc();}
let:
	equivalent to var but for few details
	nearest block scope / var scope is nearest function
	not added as property to global window object / var is added
	avoids closure problem in some situations
const:
	Block-scoped / Cant be reasigned / Cant be redeclared
closure:
	combinacion de una funcion y el ambito lexico en que se declaro, es decir
	tiene acceso a variables locales presentes en su declaracion
	function ambito(x){return function(y){return x+y;};} var sum = ambito(10);
		x var in sum is set o 10, so calling it like sum(n) will return n+10;
	Util como sustituto a un objeto con un solo metodo o para emular metodos privados
Querys:
	document.querySelector();
Events:
	document.getElementby...().onClick = someFunc();
Classes:
	constructor() no longer necesary in newway
	super() no longer needed in newway
	methods oldway mymethod(){...} newway mymethod = ()=>{}
	properties oldway this.myprop(inside constructor) newway myprop
	extends for inheritance
Destructuring:
	Array:	[var1,var2] = [1,2] stuff on the right on to left variables
				position dictates where is stuff moved (var1 == 1 and var2 == 2)
	Object:	{prop1} = {prop1:"prop1"} value of property from right object
				on to left var (prop1 == "prop1")
				name of left var dictates what gets taken from right object
Primitive types:
	Boolean,numbers,strings
Reference types:
	objects, arrays
	pointer to section in memory
	var obj2 = obj1 will only copy pointer not value
	further changes affect both
ArrayFunctions:
	const array2 = array1.map( (x)=>{ return x * 2; } ); // returns array with new values / appliesTo assigned+undefined / non-mutative 
	const index = array1.findIndex( index0 =>{ index0=="something"} ); // returns thruty index / non-mutative / takes everyIndex / -1 ifnot
	const value = array1.find( some =>{ some=="something" } ); // returns thruty value / non-mutative / applies to everyIndex / undefined ifnot
	const array2 = array1.filter( (some)=>{ some=="something" });  // returns array with thruty values / non-mutative / invoked for assigned values
	const value = array1.reduce( ( total, currVal ) => { return total+currVal }, startingVal ); // returns total of operation / non-mutative 
	const array2 = array0.concat(array1); //returns array0Elements + elements(if array) value (if not array) / non-mutative(ifPrimitiveArg) / non-recursive
	const array2 = array1.slice( [start,amount] || [amount] );  // returns shallow copy of segment of array / non-mutative / negative amount means right offset
	const  array2 = array1.splice(start, [ amount[ , items ] ]) // insert and/or remove elements in array
	
Factory function:
	const someObj =  (state)=>( {someMethod: ()=>console.log("some dialog"+state) } )
Object by Composition:
	*grouped by what they do instead of what they are
	const someObj = {
		let someProps = {...}
		return Object.assign({ }, FacFunc0(state),someFacFunc1(state),...,)
	}
	
------------------------------------------------
JS gen stuff

*If set value to input, yo need onchange event so is not readonly


------------------------------------------------

Python

Everything in python is an object
 0>x>1 is valid on python conditionals
 
 https://www.codeproject.com/Tips/638653/Compress-the-viewstate-Information
 
 
 ----------------------------------------------
 
 
 SIP
 
 T1	USA		23	23-sign	
 E1 Europa	32	0-sync 16-sign
 HMP	Host Media Processing
 VoIP Gateway	-	converts telephony traffic into ip for transmission
 
 
 
 -----------------------------------------------
 
 Galateaui
	
	function detectaLlamada(){
		if(temp1.innerText!='Esperando llamada...' && temp0.innerText=='Disponible') {
			var audioLlamada = new Audio('audio_file.mp3');
			console.log('llamada');
			audioLlamada.play();			
		}
	}
	setInterval( detectaLlamada(), 1000)
  
  <p class="agentStateTxt">Diálogo</p>
  
  <p class="timeCall outboundDesign"><!-- react-text: 4642 -->00:<!-- /react-text --><span class="timeCallBold outboundDesign">01:10</span></p>
  
  document.querySelector('p.waitingCallTextInfo').innerText
  document.querySelector('p.timeCall') ? 1 : 0
  
  setInterval(function(){console.log(document.querySelector('p.timeCall').innerText=="00:00" ? 1 : 0)}, 1000)
  
  function checar(){
	var i = 1;
	var clk = document.querySelector('p.timeCall');
	while(i<200){
	  setTimeout(function (){
	    if(clk){
	      console.log(clk.innerText=="00:00:00" ? "talking": "waiting...");
	    }else console.log(':c');
	  },i*100);
	  i++;
	}
  }